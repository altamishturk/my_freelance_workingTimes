<%- include('./partials/head.ejs') %>

    <div class="container">
      <!-- Insert time Modal -->
      <div class="modal fade" id="insertTime" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1"
                  >Start Time</span
                >
                <input
                  type="datetime-local"
                  required
                  class="form-control startTime"
                  aria-label="startTime"
                  aria-describedby="basic-addon1"
                  name="startTime"
                />
              </div>
              <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">End Time</span>
                <input
                  type="datetime-local"
                  required
                  class="form-control endTime"
                  aria-label="endTime"
                  aria-describedby="basic-addon1"
                  name="endTime"
                />
              </div>
              <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Desc..</span>
                <textarea
                  type="text"
                  required
                  class="form-control description"
                  aria-label="description"
                  aria-describedby="basic-addon1"
                  name="description"
                /></textarea>
              </div>
              <div class="input-group mb-3">
                <input
                  type="file"
                  required
                  class="form-control file"
                  aria-label="image"
                  aria-describedby="basic-addon1"
                  name="image"
                  accept="image/*" 
                  onchange="loadFile(event)"
                />
              </div>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary cancleBtn"
                data-bs-dismiss="modal"
              >
                Close
              </button>
              <button type="button" class="btn btn-primary saveBtn">
                Save changes
              </button>
            </div>
          </div>
        </div>
      </div>
      <!-- update time Modal -->
      <div class="modal fade" id="updateTime" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Desc..</span>
                <textarea
                  type="text"
                  required
                  class="form-control description"
                  aria-label="description"
                  aria-describedby="basic-addon1"
                  name="description"
                /></textarea>
              </div>
              <div class="input-group mb-3">
                <input
                  type="file"
                  required
                  class="form-control file"
                  aria-label="image"
                  aria-describedby="basic-addon1"
                  name="image"
                  accept="image/*" 
                  onchange="loadFile(event)"
                />
              </div>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary cancleBtn"
                data-bs-dismiss="modal"
              >
                Close
              </button>
              <button type="button" class="btn btn-primary saveBtn">
                Save changes
              </button>
            </div>
          </div>
        </div>
      </div>

      <form class="row my-5 searchContainer mx-auto">
        <div class="col-auto">
          <input type="datetime-local" class="form-control" id="startDate" >
        </div>
        <div class="col-auto">
          <input type="datetime-local" class="form-control" id="endDate" >
        </div>
        <div class="col-auto">
          <button type="button" class="btn btn-primary mb-3 searchBtn">Search</button>
        </div>
      </form>


      <div class="row row-cols-1 row-cols-md-3 g-4 my-5 cardsContainer"></div>

    </div>

    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script>
      // time id 
      let timeId = undefined;
   
      //  insert time 
      let insertTimeModel = document.querySelector("#insertTime");
      let startTime = insertTimeModel.querySelector(".modal-body .startTime");
      let endTime = insertTimeModel.querySelector(".modal-body .endTime");
      let description = insertTimeModel.querySelector(".modal-body .description");
      let file = insertTimeModel.querySelector(".modal-body .file");
      let saveBtn = insertTimeModel.querySelector(".modal-footer .saveBtn");
      let cancleBtn = insertTimeModel.querySelector(".modal-footer .cancleBtn");
     
      // update time 
      let updateTimeModel = document.querySelector("#updateTime");
      let updateStartTime = updateTimeModel.querySelector(".modal-body .startTime");
      let updateEndTime = updateTimeModel.querySelector(".modal-body .endTime");
      let updateDescription = updateTimeModel.querySelector(".modal-body .description");
      let updateFile = updateTimeModel.querySelector(".modal-body .file");
      let updateSaveBtn = updateTimeModel.querySelector(".modal-footer .saveBtn");
      let updateCancleBtn = updateTimeModel.querySelector(".modal-footer .cancleBtn");

      // times container 
      let timesContainer = document.querySelector(".cardsContainer");
      let totalPaidMinutesContainer = document.querySelector(".totalPaidTime .body");
      let totalUnPaidMinutesContainer = document.querySelector(".totalUnPaidTime .body");
      let totalPaidUSDContainer = document.querySelector(".totalPaidUSD .body");
      let totalUnPaidUSDContainer = document.querySelector(".totalUnPaidUSD .body");
      fetchTimeData();


      function loadFile(event){
        let reader = new FileReader();

        reader.onload = ()=>{
          if (reader.readyState === 2) {
            file = reader.result;
          }
        }

        reader.readAsDataURL(event.target.files[0]);
      }


      saveBtn.addEventListener("click", async () => {
        let startTimeInMs = new Date(startTime.value).getTime();
        let endTimeInMs = new Date(endTime.value).getTime();
        let descriptionVal = description.value;

        // console.log(startTimeInMs,endTimeInMs,description);

        if (!startTimeInMs || !endTimeInMs) {
        alert('start and end time are required');
        return
        }

        try {

          const myForm = new FormData();

          myForm.set("startTime", startTimeInMs);
          myForm.set("endTime", endTimeInMs);
          myForm.set("description", descriptionVal);
          myForm.set("image", file);


          let options = {
                headers: {
                  "Content-Type":"multipart/form-data"
                }
           };

          const res =  await axios.post(`${protocol}//${host}/api/v1/time`,myForm,options);
          console.log(res.data);


        } catch (error) {
            console.log(error);
        }
        

        fetchTimeData();
        cancleBtn.click();
      });
      

      updateSaveBtn.addEventListener("click", async () => {
        let descriptionVal = updateDescription.value;

        try {

          const myForm = new FormData();
          myForm.set("description", descriptionVal);
          myForm.set("image", file);


          let options = {
                headers: {
                  "Content-Type":"multipart/form-data"
                }
           };

          const res =  await axios.put(`${protocol}//${host}/api/v1/time/update/${timeId}`,myForm,options);
          console.log(res.data);


        } catch (error) {
            console.log(error);
        }
        

        fetchTimeData();
        updateCancleBtn.click();
      });

     
      function addZeroIfNumberIsLessThen10(num){
        if (num < 10) {
          return `0${num}`
        }
        return num;
      }


      function formatAMPM(date) {
        date = new Date(date);
        let hours = date.getHours();
        let minutes = date.getMinutes();
        let ampm = hours >= 12 ? 'pm' : 'am';
        hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        // minutes = minutes < 10 ? '0'+minutes : minutes;
        let strTime = addZeroIfNumberIsLessThen10(hours) + ':' + addZeroIfNumberIsLessThen10(minutes) + ' ' + ampm;
        return strTime;
      }

      async function fetchTimeData(query) {

        
        const res = await fetch(`${protocol}//${host}/api/v1/time/${query || ''}`, {
                  method: 'GET',
                  headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                  }
                });

    const resData = await res.json();


    if (resData.success) {
      let times = resData.times;
      displayTimes(times);
    }
    else{
      alert(resData.message)
    }
}


    const searchBtn = document.querySelector('.searchBtn');
    searchBtn.addEventListener('click',(e)=>{

      let startDate = e.target.parentElement.parentElement.querySelector('#startDate').value;
      let endDate = e.target.parentElement.parentElement.querySelector('#endDate').value;
      let query = `?startDate=${new Date(startDate).getTime()}&endDate=${new Date(endDate).getTime()}`
      
      if (!startDate || !endDate) {
        alert('You can not search without start date and end date');
        return
      }
      
      fetchTimeData(query)
      
    })
      

    function displayTimes(times){
      timesContainer.innerHTML = "";

          let html = "";

          if (!times) {
            return;
          }

          let paid = times.filter(item=> item.isPaid);
          paid = paid.sort((a, b) => b.startTime - a.endTime);;
          let UnPaid = times.filter(item=> !item.isPaid);
          UnPaid = UnPaid.sort((a, b) => b.startTime - a.endTime);

          times = [...UnPaid,...paid];

          let addImageImage = '/static/images/no_image.png';

          times.forEach((time) => {

            let isHide = user?.role === 'admin'? '':'hide'
            let date = new Date(time.startTime);
            date = `${addZeroIfNumberIsLessThen10(date.getDate())}:${addZeroIfNumberIsLessThen10((date.getMonth()+1))}:${addZeroIfNumberIsLessThen10(date.getFullYear())}`;

            let el = `  <div class="col timingCard">
            <div class="card">
              <img src="${time.image?.url? time.image.url:addImageImage}" class="card-img-top ${time.isPaid? "paid":""}" alt="img">
              <div class="card-body ${time.isPaid? "paid":""}">
                <h5 class="card-title">
                  <div class="date">Date: ${date} </div>
                  <div class="startTime">From: ${formatAMPM(time.startTime)}</div>
                  <div class="endTime">To: ${formatAMPM(time.endTime)}</div>
                  <div class="totalTime">Total Time: ${((time.endTime-time.startTime)/1000)/60} Mins</div> 
                  </h5>
                <p class="card-text">${time.description || 'Empity'}</p>
              </div>
            </div>
            <div class="col-1 p-0 actionBtn deleteBtn none">
              <button type="button"  class="btn btn-danger ${time.isPaid? "none":""} " data-id='${time._id}'>Delete</button>
          </div>
          <div class="col-1 p-0 actionBtn paidBtn none">
              <button type="button" class="btn btn-success unpaid" data-id='${time._id}'>${time.isPaid? "Unpaid":"Paid"}</button>
          </div>
          <div class="col-1 p-0 actionBtn updateBtn none">
              <button type="button" data-bs-toggle="modal" data-bs-target="#updateTime" class="btn btn-success update" data-id='${time._id}'>Update</button>
          </div>

          <div class="col-1 p-0 menu ${isHide}">
              <i class="fa fa-caret-up" aria-hidden="true"></i>
          </div>
          </div>`;

            html += el;
          });

          timesContainer.innerHTML = html;

          displayHeaderData(times);
          marktimeAsPaid();
          upadteTime();
          deleteTimes();
          showHideCrudBtns();
    }

    function marktimeAsPaid(){
      let paidBtns = document.querySelectorAll(".paidBtn button");
      paidBtns.forEach((paidBtn) => {
          paidBtn.addEventListener("click", async (e) => {
            let id = e.target.getAttribute("data-id");
            let isPaid = e.target.innerHTML==="Paid"? true:false;

            const token = localStorage.getItem('token');
            const res = await fetch(`${protocol}//${host}/api/v1/time/${id}`, {
                    method: 'PUT',
                    headers: {
                      'Accept': 'application/json',
                      'Content-Type': 'application/json',
                      'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({isPaid})
                  });

            const resData = await res.json();
            if (resData.success) {
              alert('mark paid successfully!');
              fetchTimeData();
            }
            else{
              alert(resData.message);
            }
          });
      });
    }

    function upadteTime(){
      let updateBtns = document.querySelectorAll(".updateBtn button");
      updateBtns.forEach((updateBtn) => {
        updateBtn.addEventListener("click", async (e) => {
          timeId = e.target.getAttribute("data-id");
          const time = await  getTimeById(timeId);
          updateTimeModel.classList.remove('hide');
          updateDescription.value = time.description;
        })
      })
    }

    function deleteTimes(){
      let deleteBtns = document.querySelectorAll(".deleteBtn button");
      deleteBtns.forEach((deleteBtn) => {
        deleteBtn.addEventListener("click", async (e) => {
          let id = e.target.getAttribute("data-id");
          if(window.confirm('Are You Sure!')){
                const token = localStorage.getItem('token');
                const res = await fetch(`${protocol}//${host}/api/v1/time/${id}`, {
                        method: 'DELETE',
                        headers: {
                          'Accept': 'application/json',
                          'Content-Type': 'application/json',
                          'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({data: ''})
                      });

                const resData = await res.json();
                console.log(resData);
                if (resData.success) {
                  alert('deleted successfully!');
                  fetchTimeData();
                }
                else{
                  alert(resData.message);
                }
              }    
        });
      });
    }
   
    function displayHeaderData(times){
      
    let totalPaidTimeInMs = 0;
    let totalUnPaidTimeInMs = 0;
    times.forEach(time=>{
        let diff = time.endTime - time.startTime;
        if (time.isPaid) {
            totalPaidTimeInMs += diff;
        }
        else{
            totalUnPaidTimeInMs += diff;
        }
    })

    totalPaidMinutesContainer.innerText = (totalPaidTimeInMs/1000)/60;
    totalUnPaidMinutesContainer.innerText = (totalUnPaidTimeInMs/1000)/60;
    totalPaidUSDContainer.innerText = (((totalPaidTimeInMs/1000)/60)*0.16666666666).toFixed(2);
    totalUnPaidUSDContainer.innerText = (((totalUnPaidTimeInMs/1000)/60)*0.16666666666).toFixed(2);

    }

    function showHideCrudBtns(){
      
        const menuIcons = document.querySelectorAll('.menu');
        menuIcons.forEach((menuIcon) => {
            menuIcon.addEventListener("click", async (e) => {

                let icon = e.target;

                if (e.target.classList.contains('menu')) {
                    icon = e.target.querySelector('i');
                }
                
                if (e.target.classList.contains('fa-caret-up')) {
                    icon.classList.remove('fa-caret-up')
                    icon.classList.add('fa-caret-down')
                }
                else{
                    icon.classList.remove('fa-caret-down')
                    icon.classList.add('fa-caret-up')
                }

                // console.log();
                const actionBtns = icon.parentElement.parentElement.querySelectorAll('.actionBtn')
                actionBtns.forEach(btn=>{
                    btn.classList.toggle('none');
                })

        });
        });
    }
   
    async function getTimeById(id){

    const res = await fetch(`${protocol}//${host}/api/v1/time/timeid/${id}`, {
                  method: 'GET',
                  headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                  }
                });

    const resData = await res.json();


    if (resData.success) {
      return resData.time;
    }
    else{
      alert(resData.message)
    }
   }


   </script>
  

  <%- include('./partials/footer.ejs') %>
